From f1b87b176eec07161a82526cbecfbeafe1624da2 Mon Sep 17 00:00:00 2001
From: Vishal Prabhu <vp1179@nyu.edu>
Date: Sat, 20 Apr 2019 17:14:23 -0400
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 33 ++++++++++++++++++++++++++++++++-
 proc.h    |  1 +
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 13 +++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 52 insertions(+), 1 deletion(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..23bfd0b 100644
--- a/proc.c
+++ b/proc.c
@@ -50,6 +50,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+	p->tickets = 20;        // Allocate 20 tickets
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -257,6 +258,7 @@ wait(void)
   }
 }
 
+
 //PAGEBREAK: 42
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
@@ -270,6 +272,9 @@ scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
+	int winning_ticket;
+  int current_count;
+  int total_tickets;
 
   for(;;){
     // Enable interrupts on this processor.
@@ -278,12 +283,35 @@ scheduler(void)
     if (!foundproc) hlt();
     foundproc = 0;
 
+		// Set ticket counter value to 0
+    current_count = 0;
+
+    // Obtain total tickets by adding tickets held by RUNNABLE processes
+		total_tickets = 0;
+		for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+		  if(p->state == RUNNABLE)
+		    total_tickets += p->tickets;
+
+    // Pick a random ticket number
+    winning_ticket = random_at_most((long) total_tickets);
+
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+			// For each RUNNABLE process, add its ticket count to current_count.
+      // If the winning ticket number falls between the previous current_count
+      // and the new one, we pick the process as it's holding the winning
+      // ticket. Until then, we keep looping through RUNNABLE processes.
+      current_count += p->tickets;
+      if (current_count < winning_ticket)
+      {
+        current_count += p->tickets;
+        continue;
+      }
+
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -297,6 +325,9 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+
+			// Process is done running
+      break;
     }
     release(&ptable.lock);
 
@@ -463,7 +494,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+    cprintf("%d %s %s %s", p->pid, state, p->name, p->tickets);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..89646a4 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+	int tickets;                 // Tickets the process has
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..a85ed92 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,16 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+// Set number of tickets for a process
+int
+sys_settickets(void) {
+  int num_tickets;
+
+  if (argint(0, &num_tickets) < 0)
+		// set to default value
+    proc->tickets = 20;
+  else
+    proc->tickets = num_tickets;
+  return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

